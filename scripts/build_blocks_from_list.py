# scripts/build_blocks_from_list.py
import os, json
from pathlib import Path
from datetime import datetime
import yaml

BLOCK_DIR = Path("data/blocks")
BLOCK_DIR.mkdir(parents=True, exist_ok=True)

def infer_molt_type(name: str) -> str:
    n = name.lower()
    if any(k in n for k in ["startup", "mission", "vision", "core"]):
        return "Primary"
    elif any(k in n for k in ["plan", "model", "stack", "flow", "overview"]):
        return "Subject"
    elif any(k in n for k in ["how_to", "guide", "steps", "instruction", "process"]):
        return "Instruction"
    elif any(k in n for k in ["layout", "blueprint", "design", "frame"]):
        return "Blueprint"
    elif any(k in n for k in ["ethic", "creed", "principle", "philosophy"]):
        return "Philosophy"
    elif any(k in n for k in ["priority", "behavior", "mode", "override"]):
        return "Directive"
    elif any(k in n for k in ["on_", "when_", "trigger", "if_"]):
        return "Trigger"
    elif any(k in n for k in ["draft", "archive", "ignore"]):
        return "Off"
    elif any(k in n for k in ["deploy", "push", "release", "go_live"]):
        return "Deployment"
    return "Subject"

def generate_block_tags(name: str):
    base = name.lower().replace("_", " ")
    words = list(set(base.split()))
    return words + ["umg", "ai", "builder", "block"]

def generate_cantocore(name: str, molt_type: str):
    label = name.upper().replace(" ", "_")
    return f"{molt_type[:4].upper()}:{label}"

def generate_block_json(name, idx):
    molt_type = infer_molt_type(name)
    tags = generate_block_tags(name)
    cantocore = generate_cantocore(name, molt_type)

    subfolder = BLOCK_DIR / molt_type
    subfolder.mkdir(parents=True, exist_ok=True)

    block_id = f"block_{idx:03}_{name.lower().replace(' ', '_')}"
    return block_id, {
        "block_id": block_id,
        "label": name.title(),
        "category": "AutoGenerated",
        "molt_type": molt_type,
        "tags": tags,
        "cantocore": cantocore,
        "ledger": {
            "originator": "Christopher L Haynes",
            "verified_by": "PoeUMG",
            "created_at": datetime.now().isoformat(),
            "edit_log": []
        },
        "snap_config": {
            "snap_to": ["stack"],
            "fit_score": 100,
            "display_hint": "auto"
        },
        "code_modules": [],
        "description": f"A UMG block auto-generated for {name.replace('_', ' ')}."
    }, subfolder

def main(input_file="block_list.yaml"):
    with open(input_file, "r") as f:
        block_names = yaml.safe_load(f)

    for idx, name in enumerate(block_names, start=1):
        block_id, block_data, folder = generate_block_json(name, idx)
        file_path = folder / f"{block_id}.json"
        with open(file_path, "w") as f:
            json.dump(block_data, f, indent=2)

    print(f"âœ… Generated {len(block_names)} CantoCore-enhanced blocks.")

if __name__ == "__main__":
    main()
